/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.baeldung.petstore.client.api;

import com.pseq.stex.client.model.CandlesResponse;
import com.pseq.stex.client.model.CurrenciesResponse;
import com.pseq.stex.client.model.CurrencyPairGroupsResponse;
import com.pseq.stex.client.model.CurrencyPairResponse;
import com.pseq.stex.client.model.CurrencyPairsResponse;
import com.pseq.stex.client.model.CurrencyResponse;
import com.pseq.stex.client.model.MarketResponse;
import com.pseq.stex.client.model.OrderbookResponse;
import com.pseq.stex.client.model.ServerTimeResponse;
import com.pseq.stex.client.model.TickerResponse;
import com.pseq.stex.client.model.TickersResponse;
import com.pseq.stex.client.model.TradesResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Ignore
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    /**
     * A list of candles for given currency pair
     *
     * Provides a list of candles for the chart. Candles are always ordered in descending order (the latest are first)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicChartCurrencyPairIdCandlesTypeGetTest() {
        String currencyPairId = null;
        String candlesType = null;
        Integer timeStart = null;
        Integer timeEnd = null;
        Integer limit = null;
        Integer offset = null;
        CandlesResponse response = api.publicChartCurrencyPairIdCandlesTypeGet(currencyPairId, candlesType, timeStart, timeEnd, limit, offset);

        // TODO: test validations
    }
    /**
     * Get currency info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicCurrenciesCurrencyIdGetTest() {
        Integer currencyId = null;
        CurrencyResponse response = api.publicCurrenciesCurrencyIdGet(currencyId);

        // TODO: test validations
    }
    /**
     * Available Currencies
     *
     * Get list of avialable currencies. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicCurrenciesGetTest() {
        CurrenciesResponse response = api.publicCurrenciesGet();

        // TODO: test validations
    }
    /**
     * Get currency pair information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicCurrencyPairsCurrencyPairIdGetTest() {
        Integer currencyPairId = null;
        CurrencyPairResponse response = api.publicCurrencyPairsCurrencyPairIdGet(currencyPairId);

        // TODO: test validations
    }
    /**
     * Available currency pairs for a given group
     *
     * Returns a list of avialable currency pairs in the given currency pair group 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicCurrencyPairsGroupCurrencyPairGroupIdGetTest() {
        Integer currencyPairGroupId = null;
        CurrencyPairsResponse response = api.publicCurrencyPairsGroupCurrencyPairGroupIdGet(currencyPairGroupId);

        // TODO: test validations
    }
    /**
     * Available currency pairs
     *
     * Returns a list of avialable currency pairs in the given market if {code} is one of the values returned by /public/markets. Returns all available currency pairs if ALL passed as a {code} 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicCurrencyPairsListCodeGetTest() {
        String code = null;
        CurrencyPairsResponse response = api.publicCurrencyPairsListCodeGet(code);

        // TODO: test validations
    }
    /**
     * Available markets
     *
     * Get list of all avialable markets 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicMarketsGetTest() {
        MarketResponse response = api.publicMarketsGet();

        // TODO: test validations
    }
    /**
     * Orderbook for given currency pair
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicOrderbookCurrencyPairIdGetTest() {
        Integer currencyPairId = null;
        Integer limitBids = null;
        Integer limitAsks = null;
        OrderbookResponse response = api.publicOrderbookCurrencyPairIdGet(currencyPairId, limitBids, limitAsks);

        // TODO: test validations
    }
    /**
     * Available currency pairs groups (as displayed at stex trading page)
     *
     * Get list of all avialable currency pairs groups 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicPairsGroupsGetTest() {
        CurrencyPairGroupsResponse response = api.publicPairsGroupsGet();

        // TODO: test validations
    }
    /**
     * Test API is working and get server time
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicPingGetTest() {
        ServerTimeResponse response = api.publicPingGet();

        // TODO: test validations
    }
    /**
     * Ticker for currency pair
     *
     * Returns last 24H information about currency pair ticker 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicTickerCurrencyPairIdGetTest() {
        String currencyPairId = null;
        TickerResponse response = api.publicTickerCurrencyPairIdGet(currencyPairId);

        // TODO: test validations
    }
    /**
     * Tickers list for all currency pairs
     *
     * Returns last 24H information about every currency pair. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicTickerGetTest() {
        List<TickersResponse> response = api.publicTickerGet();

        // TODO: test validations
    }
    /**
     * Trades for given currency pair
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicTradesCurrencyPairIdGetTest() {
        String currencyPairId = null;
        String sort = null;
        Integer from = null;
        Integer till = null;
        Integer limit = null;
        Integer offset = null;
        TradesResponse response = api.publicTradesCurrencyPairIdGet(currencyPairId, sort, from, till, limit, offset);

        // TODO: test validations
    }
}
