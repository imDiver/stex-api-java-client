/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.baeldung.petstore.client.api;

import java.math.BigDecimal;
import com.pseq.stex.client.model.DepositResponse;
import com.pseq.stex.client.model.DepositsResponse;
import com.pseq.stex.client.model.OperationStatus;
import com.pseq.stex.client.model.UserResponse;
import com.pseq.stex.client.model.WalletAddressResponse;
import com.pseq.stex.client.model.WalletResponse;
import com.pseq.stex.client.model.WalletWithAddressResponse;
import com.pseq.stex.client.model.WalletsResponse;
import com.pseq.stex.client.model.WithdrawalResponse;
import com.pseq.stex.client.model.WithdrawalsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileApi
 */
@Ignore
public class ProfileApiTest {

    private final ProfileApi api = new ProfileApi();

    /**
     * Get a list of deposits made by user
     *
     * Returns a list of deposits the user has made to the exchange according to the filters and parameters passed in the request. Allows to filter deposits by currency, date range etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileDepositsGetTest() {
        Integer currencyId = null;
        String sort = null;
        String timeStart = null;
        String timeEnd = null;
        Integer limit = null;
        Integer offset = null;
        DepositsResponse response = api.profileDepositsGet(currencyId, sort, timeStart, timeEnd, limit, offset);

        // TODO: test validations
    }
    /**
     * Get deposit by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileDepositsIdGetTest() {
        String id = null;
        DepositResponse response = api.profileDepositsIdGet(id);

        // TODO: test validations
    }
    /**
     * Account information
     *
     * Get general information about the current user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileInfoGetTest() {
        UserResponse response = api.profileInfoGet();

        // TODO: test validations
    }
    /**
     * Get deposit address for given wallet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWalletsAddressWalletIdGetTest() {
        String walletId = null;
        WalletAddressResponse response = api.profileWalletsAddressWalletIdGet(walletId);

        // TODO: test validations
    }
    /**
     * Create new deposit address
     *
     * This method allows to generate deposit address if no address was previously generated. It is also allowed to re-generate new address for some currencies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWalletsAddressWalletIdPostTest() {
        String walletId = null;
        WalletAddressResponse response = api.profileWalletsAddressWalletIdPost(walletId);

        // TODO: test validations
    }
    /**
     * Create a wallet for given currency
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWalletsCurrencyIdPostTest() {
        Integer currencyId = null;
        WalletResponse response = api.profileWalletsCurrencyIdPost(currencyId);

        // TODO: test validations
    }
    /**
     * Get a list of user wallets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWalletsGetTest() {
        String sort = null;
        String sortBy = null;
        WalletsResponse response = api.profileWalletsGet(sort, sortBy);

        // TODO: test validations
    }
    /**
     * Single wallet information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWalletsWalletIdGetTest() {
        Integer walletId = null;
        WalletWithAddressResponse response = api.profileWalletsWalletIdGet(walletId);

        // TODO: test validations
    }
    /**
     * Create withdrawal request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWithdrawPostTest() {
        Integer currencyId = null;
        BigDecimal amount = null;
        String address = null;
        String additionalAddress = null;
        WithdrawalResponse response = api.profileWithdrawPost(currencyId, amount, address, additionalAddress);

        // TODO: test validations
    }
    /**
     * Cancel unconfirmed withdrawal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWithdrawWithdrawalIdDeleteTest() {
        String withdrawalId = null;
        OperationStatus response = api.profileWithdrawWithdrawalIdDelete(withdrawalId);

        // TODO: test validations
    }
    /**
     * Get a list of withdrawals made by user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWithdrawalsGetTest() {
        Integer currencyId = null;
        String sort = null;
        Integer timeStart = null;
        Integer timeEnd = null;
        Integer limit = null;
        Integer offset = null;
        WithdrawalsResponse response = api.profileWithdrawalsGet(currencyId, sort, timeStart, timeEnd, limit, offset);

        // TODO: test validations
    }
    /**
     * Get withdrawal by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileWithdrawalsIdGetTest() {
        String id = null;
        WithdrawalResponse response = api.profileWithdrawalsIdGet(id);

        // TODO: test validations
    }
}
