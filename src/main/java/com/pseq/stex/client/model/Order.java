/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Order
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class Order {

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("currency_pair_id")

  private Integer currencyPairId = null;

  @JsonProperty("price")

  private String price = null;

  @JsonProperty("trigger_price")

  private String triggerPrice = null;

  @JsonProperty("initial_amount")

  private String initialAmount = null;

  @JsonProperty("processed_amount")

  private String processedAmount = null;
  /**
   * order type BUY or SELL
   */
  public enum TypeEnum {
    BUY("BUY"),
    SELL("SELL"),
    STOP_LIMIT_BUY("STOP_LIMIT_BUY"),
    STOP_LIMIT_SELL("STOP_LIMIT_SELL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("type")

  private TypeEnum type = null;
  /**
   * order type BUY or SELL
   */
  public enum OriginalTypeEnum {
    BUY("BUY"),
    SELL("SELL"),
    STOP_LIMIT_BUY("STOP_LIMIT_BUY"),
    STOP_LIMIT_SELL("STOP_LIMIT_SELL");

    private String value;

    OriginalTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static OriginalTypeEnum fromValue(String text) {
      for (OriginalTypeEnum b : OriginalTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("original_type")

  private OriginalTypeEnum originalType = null;

  @JsonProperty("created")

  private OffsetDateTime created = null;

  @JsonProperty("timestamp")

  private Integer timestamp = null;
  /**
   * order status at the time of the request
   */
  public enum StatusEnum {
    PROCESSING("PROCESSING"),
    PENDING("PENDING"),
    FINISHED("FINISHED"),
    PARTIAL("PARTIAL"),
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("status")

  private StatusEnum status = null;
  public Order id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * unique ID of the order
  * @return id
  **/
  @Schema(example = "828680665", description = "unique ID of the order")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Order currencyPairId(Integer currencyPairId) {
    this.currencyPairId = currencyPairId;
    return this;
  }

  

  /**
  * id of the currency pair the order is placed at
  * @return currencyPairId
  **/
  @Schema(example = "1", description = "id of the currency pair the order is placed at")
  public Integer getCurrencyPairId() {
    return currencyPairId;
  }
  public void setCurrencyPairId(Integer currencyPairId) {
    this.currencyPairId = currencyPairId;
  }
  public Order price(String price) {
    this.price = price;
    return this;
  }

  

  /**
  * the price of the order
  * @return price
  **/
  @Schema(example = "0.011384", description = "the price of the order")
  public String getPrice() {
    return price;
  }
  public void setPrice(String price) {
    this.price = price;
  }
  public Order triggerPrice(String triggerPrice) {
    this.triggerPrice = triggerPrice;
    return this;
  }

  

  /**
  * the stop price of the stop-limit order
  * @return triggerPrice
  **/
  @Schema(example = "0.011385", description = "the stop price of the stop-limit order")
  public String getTriggerPrice() {
    return triggerPrice;
  }
  public void setTriggerPrice(String triggerPrice) {
    this.triggerPrice = triggerPrice;
  }
  public Order initialAmount(String initialAmount) {
    this.initialAmount = initialAmount;
    return this;
  }

  

  /**
  * amount of the order
  * @return initialAmount
  **/
  @Schema(example = "13.942", description = "amount of the order")
  public String getInitialAmount() {
    return initialAmount;
  }
  public void setInitialAmount(String initialAmount) {
    this.initialAmount = initialAmount;
  }
  public Order processedAmount(String processedAmount) {
    this.processedAmount = processedAmount;
    return this;
  }

  

  /**
  * amount that already has been processed at the time of request
  * @return processedAmount
  **/
  @Schema(example = "3.724", description = "amount that already has been processed at the time of request")
  public String getProcessedAmount() {
    return processedAmount;
  }
  public void setProcessedAmount(String processedAmount) {
    this.processedAmount = processedAmount;
  }
  public Order type(TypeEnum type) {
    this.type = type;
    return this;
  }

  

  /**
  * order type BUY or SELL
  * @return type
  **/
  @Schema(example = "SELL", description = "order type BUY or SELL")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  public Order originalType(OriginalTypeEnum originalType) {
    this.originalType = originalType;
    return this;
  }

  

  /**
  * order type BUY or SELL
  * @return originalType
  **/
  @Schema(example = "STOP_LIMIT_SELL", description = "order type BUY or SELL")
  public OriginalTypeEnum getOriginalType() {
    return originalType;
  }
  public void setOriginalType(OriginalTypeEnum originalType) {
    this.originalType = originalType;
  }
  public Order created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  

  /**
  * Order creation date and time (UTC)
  * @return created
  **/
  @Schema(description = "Order creation date and time (UTC)")
  public OffsetDateTime getCreated() {
    return created;
  }
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public Order timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Order creation timestamp (in seconds) UTC
  * @return timestamp
  **/
  @Schema(example = "1547720088", description = "Order creation timestamp (in seconds) UTC")
  public Integer getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }
  public Order status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * order status at the time of the request
  * @return status
  **/
  @Schema(example = "PARTIAL", description = "order status at the time of the request")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.id, order.id) &&
        Objects.equals(this.currencyPairId, order.currencyPairId) &&
        Objects.equals(this.price, order.price) &&
        Objects.equals(this.triggerPrice, order.triggerPrice) &&
        Objects.equals(this.initialAmount, order.initialAmount) &&
        Objects.equals(this.processedAmount, order.processedAmount) &&
        Objects.equals(this.type, order.type) &&
        Objects.equals(this.originalType, order.originalType) &&
        Objects.equals(this.created, order.created) &&
        Objects.equals(this.timestamp, order.timestamp) &&
        Objects.equals(this.status, order.status);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, currencyPairId, price, triggerPrice, initialAmount, processedAmount, type, originalType, created, timestamp, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currencyPairId: ").append(toIndentedString(currencyPairId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    triggerPrice: ").append(toIndentedString(triggerPrice)).append("\n");
    sb.append("    initialAmount: ").append(toIndentedString(initialAmount)).append("\n");
    sb.append("    processedAmount: ").append(toIndentedString(processedAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    originalType: ").append(toIndentedString(originalType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
