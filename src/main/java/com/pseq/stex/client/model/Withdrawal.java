/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pseq.stex.client.model.WalletAddress;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;

/**
 * Withdrawal
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class Withdrawal {

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("amount")

  private BigDecimal amount = null;

  @JsonProperty("currency_id")

  private Integer currencyId = null;

  @JsonProperty("currency_code")

  private String currencyCode = null;

  @JsonProperty("fee")

  private BigDecimal fee = null;

  @JsonProperty("fee_currency_id")

  private Integer feeCurrencyId = null;

  @JsonProperty("fee_currency_code")

  private String feeCurrencyCode = null;
  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    NOT_CONFIRMED("Not Confirmed"),
    CANCELLED_BY_USER("Cancelled by User"),
    AWAITING_APPROVAL("Awaiting Approval"),
    APPROVED("Approved"),
    PROCESSING("Processing"),
    FINISHED("Finished"),
    WITHDRAWAL_ERROR("Withdrawal Error"),
    CANCELLED_BY_ADMIN("Cancelled by Admin"),
    AWAITING("Awaiting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("status")

  private StatusEnum status = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("created_ts")

  private Integer createdTs = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("updated_ts")

  private Integer updatedTs = null;

  @JsonProperty("txid")

  private String txid = null;

  @JsonProperty("withdrawal_address")

  private WalletAddress withdrawalAddress = null;
  public Withdrawal id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(example = "65899", description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Withdrawal amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  

  /**
  * Get amount
  * @return amount
  **/
  @Schema(example = "0.00600000", description = "")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }
  public Withdrawal currencyId(Integer currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  

  /**
  * Get currencyId
  * @return currencyId
  **/
  @Schema(example = "1", description = "")
  public Integer getCurrencyId() {
    return currencyId;
  }
  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }
  public Withdrawal currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  

  /**
  * Get currencyCode
  * @return currencyCode
  **/
  @Schema(example = "BTC", description = "")
  public String getCurrencyCode() {
    return currencyCode;
  }
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }
  public Withdrawal fee(BigDecimal fee) {
    this.fee = fee;
    return this;
  }

  

  /**
  * Get fee
  * @return fee
  **/
  @Schema(example = "0.00400000", description = "")
  public BigDecimal getFee() {
    return fee;
  }
  public void setFee(BigDecimal fee) {
    this.fee = fee;
  }
  public Withdrawal feeCurrencyId(Integer feeCurrencyId) {
    this.feeCurrencyId = feeCurrencyId;
    return this;
  }

  

  /**
  * Get feeCurrencyId
  * @return feeCurrencyId
  **/
  @Schema(example = "1", description = "")
  public Integer getFeeCurrencyId() {
    return feeCurrencyId;
  }
  public void setFeeCurrencyId(Integer feeCurrencyId) {
    this.feeCurrencyId = feeCurrencyId;
  }
  public Withdrawal feeCurrencyCode(String feeCurrencyCode) {
    this.feeCurrencyCode = feeCurrencyCode;
    return this;
  }

  

  /**
  * Get feeCurrencyCode
  * @return feeCurrencyCode
  **/
  @Schema(example = "BTC", description = "")
  public String getFeeCurrencyCode() {
    return feeCurrencyCode;
  }
  public void setFeeCurrencyCode(String feeCurrencyCode) {
    this.feeCurrencyCode = feeCurrencyCode;
  }
  public Withdrawal status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(example = "Not Confirmed", description = "")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public Withdrawal createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Get createdAt
  * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Withdrawal createdTs(Integer createdTs) {
    this.createdTs = createdTs;
    return this;
  }

  

  /**
  * Get createdTs
  * @return createdTs
  **/
  @Schema(example = "1548063365", description = "")
  public Integer getCreatedTs() {
    return createdTs;
  }
  public void setCreatedTs(Integer createdTs) {
    this.createdTs = createdTs;
  }
  public Withdrawal updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * Get updatedAt
  * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public Withdrawal updatedTs(Integer updatedTs) {
    this.updatedTs = updatedTs;
    return this;
  }

  

  /**
  * Get updatedTs
  * @return updatedTs
  **/
  @Schema(example = "1548063365", description = "")
  public Integer getUpdatedTs() {
    return updatedTs;
  }
  public void setUpdatedTs(Integer updatedTs) {
    this.updatedTs = updatedTs;
  }
  public Withdrawal txid(String txid) {
    this.txid = txid;
    return this;
  }

  

  /**
  * Get txid
  * @return txid
  **/
  @Schema(description = "")
  public String getTxid() {
    return txid;
  }
  public void setTxid(String txid) {
    this.txid = txid;
  }
  public Withdrawal withdrawalAddress(WalletAddress withdrawalAddress) {
    this.withdrawalAddress = withdrawalAddress;
    return this;
  }

  

  /**
  * Get withdrawalAddress
  * @return withdrawalAddress
  **/
  @Schema(description = "")
  public WalletAddress getWithdrawalAddress() {
    return withdrawalAddress;
  }
  public void setWithdrawalAddress(WalletAddress withdrawalAddress) {
    this.withdrawalAddress = withdrawalAddress;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Withdrawal withdrawal = (Withdrawal) o;
    return Objects.equals(this.id, withdrawal.id) &&
        Objects.equals(this.amount, withdrawal.amount) &&
        Objects.equals(this.currencyId, withdrawal.currencyId) &&
        Objects.equals(this.currencyCode, withdrawal.currencyCode) &&
        Objects.equals(this.fee, withdrawal.fee) &&
        Objects.equals(this.feeCurrencyId, withdrawal.feeCurrencyId) &&
        Objects.equals(this.feeCurrencyCode, withdrawal.feeCurrencyCode) &&
        Objects.equals(this.status, withdrawal.status) &&
        Objects.equals(this.createdAt, withdrawal.createdAt) &&
        Objects.equals(this.createdTs, withdrawal.createdTs) &&
        Objects.equals(this.updatedAt, withdrawal.updatedAt) &&
        Objects.equals(this.updatedTs, withdrawal.updatedTs) &&
        Objects.equals(this.txid, withdrawal.txid) &&
        Objects.equals(this.withdrawalAddress, withdrawal.withdrawalAddress);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, amount, currencyId, currencyCode, fee, feeCurrencyId, feeCurrencyCode, status, createdAt, createdTs, updatedAt, updatedTs, txid, withdrawalAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Withdrawal {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    feeCurrencyId: ").append(toIndentedString(feeCurrencyId)).append("\n");
    sb.append("    feeCurrencyCode: ").append(toIndentedString(feeCurrencyCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedTs: ").append(toIndentedString(updatedTs)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    withdrawalAddress: ").append(toIndentedString(withdrawalAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
