/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pseq.stex.client.model.TickerFiatsRate;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Ticker
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class Ticker {

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("amount_multiplier")

  private Integer amountMultiplier = null;

  @JsonProperty("currency_code")

  private String currencyCode = null;

  @JsonProperty("market_code")

  private String marketCode = null;

  @JsonProperty("currency_name")

  private String currencyName = null;

  @JsonProperty("market_name")

  private String marketName = null;

  @JsonProperty("symbol")

  private String symbol = null;

  @JsonProperty("group_name")

  private String groupName = null;

  @JsonProperty("group_id")

  private Integer groupId = null;

  @JsonProperty("ask")

  private String ask = null;

  @JsonProperty("bid")

  private String bid = null;

  @JsonProperty("last")

  private String last = null;

  @JsonProperty("low")

  private String low = null;

  @JsonProperty("high")

  private String high = null;

  @JsonProperty("open")

  private String open = null;

  @JsonProperty("volume")

  private String volume = null;

  @JsonProperty("volumeQuote")

  private String volumeQuote = null;

  @JsonProperty("fiatsRate")

  private TickerFiatsRate fiatsRate = null;

  @JsonProperty("timestamp")

  private Integer timestamp = null;
  public Ticker id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Currency pair ID
  * @return id
  **/
  @Schema(example = "1", description = "Currency pair ID")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Ticker amountMultiplier(Integer amountMultiplier) {
    this.amountMultiplier = amountMultiplier;
    return this;
  }

  

  /**
  * Multiplier for the ammpont. Used if the currency in the pair is too cheap to be trade, In this case a lot is sold.
  * @return amountMultiplier
  **/
  @Schema(example = "1", description = "Multiplier for the ammpont. Used if the currency in the pair is too cheap to be trade, In this case a lot is sold.")
  public Integer getAmountMultiplier() {
    return amountMultiplier;
  }
  public void setAmountMultiplier(Integer amountMultiplier) {
    this.amountMultiplier = amountMultiplier;
  }
  public Ticker currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  

  /**
  * Code of the currency
  * @return currencyCode
  **/
  @Schema(example = "ETH", description = "Code of the currency")
  public String getCurrencyCode() {
    return currencyCode;
  }
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }
  public Ticker marketCode(String marketCode) {
    this.marketCode = marketCode;
    return this;
  }

  

  /**
  * Code of the market currency
  * @return marketCode
  **/
  @Schema(example = "BTC", description = "Code of the market currency")
  public String getMarketCode() {
    return marketCode;
  }
  public void setMarketCode(String marketCode) {
    this.marketCode = marketCode;
  }
  public Ticker currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

  

  /**
  * Full name of the currency
  * @return currencyName
  **/
  @Schema(example = "Etherium", description = "Full name of the currency")
  public String getCurrencyName() {
    return currencyName;
  }
  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }
  public Ticker marketName(String marketName) {
    this.marketName = marketName;
    return this;
  }

  

  /**
  * Full name of the market currency
  * @return marketName
  **/
  @Schema(example = "Bitcoin", description = "Full name of the market currency")
  public String getMarketName() {
    return marketName;
  }
  public void setMarketName(String marketName) {
    this.marketName = marketName;
  }
  public Ticker symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  

  /**
  * CurrencyPairGroup symbol
  * @return symbol
  **/
  @Schema(example = "ETH_BTC", description = "CurrencyPairGroup symbol")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }
  public Ticker groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  

  /**
  * Currency Pair Group name
  * @return groupName
  **/
  @Schema(example = "FIAT coins", description = "Currency Pair Group name")
  public String getGroupName() {
    return groupName;
  }
  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }
  public Ticker groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  

  /**
  * Currency Pair Group id
  * @return groupId
  **/
  @Schema(example = "1", description = "Currency Pair Group id")
  public Integer getGroupId() {
    return groupId;
  }
  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }
  public Ticker ask(String ask) {
    this.ask = ask;
    return this;
  }

  

  /**
  * Best ASK.
  * @return ask
  **/
  @Schema(example = "0.03377988", description = "Best ASK.")
  public String getAsk() {
    return ask;
  }
  public void setAsk(String ask) {
    this.ask = ask;
  }
  public Ticker bid(String bid) {
    this.bid = bid;
    return this;
  }

  

  /**
  * Best BID.
  * @return bid
  **/
  @Schema(example = "0.03350001", description = "Best BID.")
  public String getBid() {
    return bid;
  }
  public void setBid(String bid) {
    this.bid = bid;
  }
  public Ticker last(String last) {
    this.last = last;
    return this;
  }

  

  /**
  * Last trade price
  * @return last
  **/
  @Schema(example = "0.0337", description = "Last trade price")
  public String getLast() {
    return last;
  }
  public void setLast(String last) {
    this.last = last;
  }
  public Ticker low(String low) {
    this.low = low;
    return this;
  }

  

  /**
  * Min trade price of the last 24 hours.
  * @return low
  **/
  @Schema(example = "0.03320157", description = "Min trade price of the last 24 hours.")
  public String getLow() {
    return low;
  }
  public void setLow(String low) {
    this.low = low;
  }
  public Ticker high(String high) {
    this.high = high;
    return this;
  }

  

  /**
  * Max trade price of the last 24 hours.
  * @return high
  **/
  @Schema(example = "0.0341", description = "Max trade price of the last 24 hours.")
  public String getHigh() {
    return high;
  }
  public void setHigh(String high) {
    this.high = high;
  }
  public Ticker open(String open) {
    this.open = open;
    return this;
  }

  

  /**
  * Trade price 24 hours ago.
  * @return open
  **/
  @Schema(example = "0.03340002", description = "Trade price 24 hours ago.")
  public String getOpen() {
    return open;
  }
  public void setOpen(String open) {
    this.open = open;
  }
  public Ticker volume(String volume) {
    this.volume = volume;
    return this;
  }

  

  /**
  * Trading volume in market currency of the last 24 hours.
  * @return volume
  **/
  @Schema(example = "5.1939", description = "Trading volume in market currency of the last 24 hours.")
  public String getVolume() {
    return volume;
  }
  public void setVolume(String volume) {
    this.volume = volume;
  }
  public Ticker volumeQuote(String volumeQuote) {
    this.volumeQuote = volumeQuote;
    return this;
  }

  

  /**
  * Trading volume in currency of the last 24 hours.
  * @return volumeQuote
  **/
  @Schema(example = "154.12169946", description = "Trading volume in currency of the last 24 hours.")
  public String getVolumeQuote() {
    return volumeQuote;
  }
  public void setVolumeQuote(String volumeQuote) {
    this.volumeQuote = volumeQuote;
  }
  public Ticker fiatsRate(TickerFiatsRate fiatsRate) {
    this.fiatsRate = fiatsRate;
    return this;
  }

  

  /**
  * Get fiatsRate
  * @return fiatsRate
  **/
  @Schema(description = "")
  public TickerFiatsRate getFiatsRate() {
    return fiatsRate;
  }
  public void setFiatsRate(TickerFiatsRate fiatsRate) {
    this.fiatsRate = fiatsRate;
  }
  public Ticker timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Timestamp of the provided data
  * @return timestamp
  **/
  @Schema(example = "1538737692", description = "Timestamp of the provided data")
  public Integer getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ticker ticker = (Ticker) o;
    return Objects.equals(this.id, ticker.id) &&
        Objects.equals(this.amountMultiplier, ticker.amountMultiplier) &&
        Objects.equals(this.currencyCode, ticker.currencyCode) &&
        Objects.equals(this.marketCode, ticker.marketCode) &&
        Objects.equals(this.currencyName, ticker.currencyName) &&
        Objects.equals(this.marketName, ticker.marketName) &&
        Objects.equals(this.symbol, ticker.symbol) &&
        Objects.equals(this.groupName, ticker.groupName) &&
        Objects.equals(this.groupId, ticker.groupId) &&
        Objects.equals(this.ask, ticker.ask) &&
        Objects.equals(this.bid, ticker.bid) &&
        Objects.equals(this.last, ticker.last) &&
        Objects.equals(this.low, ticker.low) &&
        Objects.equals(this.high, ticker.high) &&
        Objects.equals(this.open, ticker.open) &&
        Objects.equals(this.volume, ticker.volume) &&
        Objects.equals(this.volumeQuote, ticker.volumeQuote) &&
        Objects.equals(this.fiatsRate, ticker.fiatsRate) &&
        Objects.equals(this.timestamp, ticker.timestamp);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, amountMultiplier, currencyCode, marketCode, currencyName, marketName, symbol, groupName, groupId, ask, bid, last, low, high, open, volume, volumeQuote, fiatsRate, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ticker {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amountMultiplier: ").append(toIndentedString(amountMultiplier)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    marketCode: ").append(toIndentedString(marketCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    marketName: ").append(toIndentedString(marketName)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    ask: ").append(toIndentedString(ask)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    volumeQuote: ").append(toIndentedString(volumeQuote)).append("\n");
    sb.append("    fiatsRate: ").append(toIndentedString(fiatsRate)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
