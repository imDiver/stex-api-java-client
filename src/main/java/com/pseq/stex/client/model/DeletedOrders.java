/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pseq.stex.client.model.Order;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * DeletedOrders
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class DeletedOrders {

  @JsonProperty("put_into_processing_queue")

  private List<Order> putIntoProcessingQueue = null;

  @JsonProperty("not_put_into_processing_queue")

  private List<Order> notPutIntoProcessingQueue = null;

  @JsonProperty("message")

  private String message = null;
  public DeletedOrders putIntoProcessingQueue(List<Order> putIntoProcessingQueue) {
    this.putIntoProcessingQueue = putIntoProcessingQueue;
    return this;
  }

  public DeletedOrders addPutIntoProcessingQueueItem(Order putIntoProcessingQueueItem) {
    if (this.putIntoProcessingQueue == null) {
      this.putIntoProcessingQueue = new ArrayList<Order>();
    }
    this.putIntoProcessingQueue.add(putIntoProcessingQueueItem);
    return this;
  }

  /**
  * Array of Orders that were successfully put into processing queue for cancelling
  * @return putIntoProcessingQueue
  **/
  @Schema(description = "Array of Orders that were successfully put into processing queue for cancelling")
  public List<Order> getPutIntoProcessingQueue() {
    return putIntoProcessingQueue;
  }
  public void setPutIntoProcessingQueue(List<Order> putIntoProcessingQueue) {
    this.putIntoProcessingQueue = putIntoProcessingQueue;
  }
  public DeletedOrders notPutIntoProcessingQueue(List<Order> notPutIntoProcessingQueue) {
    this.notPutIntoProcessingQueue = notPutIntoProcessingQueue;
    return this;
  }

  public DeletedOrders addNotPutIntoProcessingQueueItem(Order notPutIntoProcessingQueueItem) {
    if (this.notPutIntoProcessingQueue == null) {
      this.notPutIntoProcessingQueue = new ArrayList<Order>();
    }
    this.notPutIntoProcessingQueue.add(notPutIntoProcessingQueueItem);
    return this;
  }

  /**
  * Array of Orders that were NOT put into processing queue for cancelling
  * @return notPutIntoProcessingQueue
  **/
  @Schema(description = "Array of Orders that were NOT put into processing queue for cancelling")
  public List<Order> getNotPutIntoProcessingQueue() {
    return notPutIntoProcessingQueue;
  }
  public void setNotPutIntoProcessingQueue(List<Order> notPutIntoProcessingQueue) {
    this.notPutIntoProcessingQueue = notPutIntoProcessingQueue;
  }
  public DeletedOrders message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * A message from server
  * @return message
  **/
  @Schema(description = "A message from server")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletedOrders deletedOrders = (DeletedOrders) o;
    return Objects.equals(this.putIntoProcessingQueue, deletedOrders.putIntoProcessingQueue) &&
        Objects.equals(this.notPutIntoProcessingQueue, deletedOrders.notPutIntoProcessingQueue) &&
        Objects.equals(this.message, deletedOrders.message);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(putIntoProcessingQueue, notPutIntoProcessingQueue, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletedOrders {\n");
    
    sb.append("    putIntoProcessingQueue: ").append(toIndentedString(putIntoProcessingQueue)).append("\n");
    sb.append("    notPutIntoProcessingQueue: ").append(toIndentedString(notPutIntoProcessingQueue)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
