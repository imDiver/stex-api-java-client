/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CurrencyPair
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class CurrencyPair {

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("currency_id")

  private Integer currencyId = null;

  @JsonProperty("currency_code")

  private String currencyCode = null;

  @JsonProperty("currency_name")

  private String currencyName = null;

  @JsonProperty("market_currency_id")

  private Integer marketCurrencyId = null;

  @JsonProperty("market_code")

  private String marketCode = null;

  @JsonProperty("market_name")

  private String marketName = null;

  @JsonProperty("min_order_amount")

  private String minOrderAmount = null;

  @JsonProperty("min_buy_price")

  private String minBuyPrice = null;

  @JsonProperty("min_sell_price")

  private String minSellPrice = null;

  @JsonProperty("buy_fee_percent")

  private String buyFeePercent = null;

  @JsonProperty("sell_fee_percent")

  private String sellFeePercent = null;

  @JsonProperty("active")

  private Boolean active = null;

  @JsonProperty("delisted")

  private Boolean delisted = null;

  @JsonProperty("pair_message")

  private String pairMessage = null;

  @JsonProperty("currency_precision")

  private Integer currencyPrecision = null;

  @JsonProperty("market_precision")

  private Integer marketPrecision = null;

  @JsonProperty("symbol")

  private String symbol = null;

  @JsonProperty("group_name")

  private String groupName = null;

  @JsonProperty("group_id")

  private Integer groupId = null;

  @JsonProperty("amount_multiplier")

  private Integer amountMultiplier = null;
  public CurrencyPair id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Currency pair ID
  * @return id
  **/
  @Schema(example = "1", description = "Currency pair ID")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public CurrencyPair currencyId(Integer currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  

  /**
  * Currency id as returned by /public/currencies
  * @return currencyId
  **/
  @Schema(example = "2", description = "Currency id as returned by /public/currencies")
  public Integer getCurrencyId() {
    return currencyId;
  }
  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }
  public CurrencyPair currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  

  /**
  * Currency code as returned by /public/currencies
  * @return currencyCode
  **/
  @Schema(example = "ETH", description = "Currency code as returned by /public/currencies")
  public String getCurrencyCode() {
    return currencyCode;
  }
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }
  public CurrencyPair currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

  

  /**
  * Full name of the currency
  * @return currencyName
  **/
  @Schema(example = "Etherium", description = "Full name of the currency")
  public String getCurrencyName() {
    return currencyName;
  }
  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }
  public CurrencyPair marketCurrencyId(Integer marketCurrencyId) {
    this.marketCurrencyId = marketCurrencyId;
    return this;
  }

  

  /**
  * Currency id of the market currency as returned by /public/currencies
  * @return marketCurrencyId
  **/
  @Schema(example = "1", description = "Currency id of the market currency as returned by /public/currencies")
  public Integer getMarketCurrencyId() {
    return marketCurrencyId;
  }
  public void setMarketCurrencyId(Integer marketCurrencyId) {
    this.marketCurrencyId = marketCurrencyId;
  }
  public CurrencyPair marketCode(String marketCode) {
    this.marketCode = marketCode;
    return this;
  }

  

  /**
  * CurrencyPairGroup code as returned by /public/markets
  * @return marketCode
  **/
  @Schema(example = "BTC", description = "CurrencyPairGroup code as returned by /public/markets")
  public String getMarketCode() {
    return marketCode;
  }
  public void setMarketCode(String marketCode) {
    this.marketCode = marketCode;
  }
  public CurrencyPair marketName(String marketName) {
    this.marketName = marketName;
    return this;
  }

  

  /**
  * Full name of the market
  * @return marketName
  **/
  @Schema(example = "Bitcoin", description = "Full name of the market")
  public String getMarketName() {
    return marketName;
  }
  public void setMarketName(String marketName) {
    this.marketName = marketName;
  }
  public CurrencyPair minOrderAmount(String minOrderAmount) {
    this.minOrderAmount = minOrderAmount;
    return this;
  }

  

  /**
  * The minimum amount of the order that can be placed
  * @return minOrderAmount
  **/
  @Schema(example = "0.0000001", description = "The minimum amount of the order that can be placed")
  public String getMinOrderAmount() {
    return minOrderAmount;
  }
  public void setMinOrderAmount(String minOrderAmount) {
    this.minOrderAmount = minOrderAmount;
  }
  public CurrencyPair minBuyPrice(String minBuyPrice) {
    this.minBuyPrice = minBuyPrice;
    return this;
  }

  

  /**
  * The minimum price of the bid
  * @return minBuyPrice
  **/
  @Schema(example = "0.0000001", description = "The minimum price of the bid")
  public String getMinBuyPrice() {
    return minBuyPrice;
  }
  public void setMinBuyPrice(String minBuyPrice) {
    this.minBuyPrice = minBuyPrice;
  }
  public CurrencyPair minSellPrice(String minSellPrice) {
    this.minSellPrice = minSellPrice;
    return this;
  }

  

  /**
  * The minimum price of the ask
  * @return minSellPrice
  **/
  @Schema(example = "0.0000001", description = "The minimum price of the ask")
  public String getMinSellPrice() {
    return minSellPrice;
  }
  public void setMinSellPrice(String minSellPrice) {
    this.minSellPrice = minSellPrice;
  }
  public CurrencyPair buyFeePercent(String buyFeePercent) {
    this.buyFeePercent = buyFeePercent;
    return this;
  }

  

  /**
  * Bid fee in percents
  * @return buyFeePercent
  **/
  @Schema(example = "0", description = "Bid fee in percents")
  public String getBuyFeePercent() {
    return buyFeePercent;
  }
  public void setBuyFeePercent(String buyFeePercent) {
    this.buyFeePercent = buyFeePercent;
  }
  public CurrencyPair sellFeePercent(String sellFeePercent) {
    this.sellFeePercent = sellFeePercent;
    return this;
  }

  

  /**
  * Ask fee in percents
  * @return sellFeePercent
  **/
  @Schema(example = "0", description = "Ask fee in percents")
  public String getSellFeePercent() {
    return sellFeePercent;
  }
  public void setSellFeePercent(String sellFeePercent) {
    this.sellFeePercent = sellFeePercent;
  }
  public CurrencyPair active(Boolean active) {
    this.active = active;
    return this;
  }

  

  /**
  * Indicates is the currency pair active (trades are enabled) or not
  * @return active
  **/
  @Schema(description = "Indicates is the currency pair active (trades are enabled) or not")
  public Boolean isActive() {
    return active;
  }
  public void setActive(Boolean active) {
    this.active = active;
  }
  public CurrencyPair delisted(Boolean delisted) {
    this.delisted = delisted;
    return this;
  }

  

  /**
  * Indicates if the currency pair is delisted
  * @return delisted
  **/
  @Schema(description = "Indicates if the currency pair is delisted")
  public Boolean isDelisted() {
    return delisted;
  }
  public void setDelisted(Boolean delisted) {
    this.delisted = delisted;
  }
  public CurrencyPair pairMessage(String pairMessage) {
    this.pairMessage = pairMessage;
    return this;
  }

  

  /**
  * Message that is shown on the currency pair trade page
  * @return pairMessage
  **/
  @Schema(example = "Happy trading!", description = "Message that is shown on the currency pair trade page")
  public String getPairMessage() {
    return pairMessage;
  }
  public void setPairMessage(String pairMessage) {
    this.pairMessage = pairMessage;
  }
  public CurrencyPair currencyPrecision(Integer currencyPrecision) {
    this.currencyPrecision = currencyPrecision;
    return this;
  }

  

  /**
  * Number of decimal places allowed for this currency
  * @return currencyPrecision
  **/
  @Schema(example = "8", description = "Number of decimal places allowed for this currency")
  public Integer getCurrencyPrecision() {
    return currencyPrecision;
  }
  public void setCurrencyPrecision(Integer currencyPrecision) {
    this.currencyPrecision = currencyPrecision;
  }
  public CurrencyPair marketPrecision(Integer marketPrecision) {
    this.marketPrecision = marketPrecision;
    return this;
  }

  

  /**
  * Number of decimal places allowed for the currency of the market
  * @return marketPrecision
  **/
  @Schema(example = "8", description = "Number of decimal places allowed for the currency of the market")
  public Integer getMarketPrecision() {
    return marketPrecision;
  }
  public void setMarketPrecision(Integer marketPrecision) {
    this.marketPrecision = marketPrecision;
  }
  public CurrencyPair symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  

  /**
  * CurrencyPairGroup symbol
  * @return symbol
  **/
  @Schema(example = "ETH_BTC", description = "CurrencyPairGroup symbol")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }
  public CurrencyPair groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  

  /**
  * Currency pair group name
  * @return groupName
  **/
  @Schema(example = "Fiat coins", description = "Currency pair group name")
  public String getGroupName() {
    return groupName;
  }
  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }
  public CurrencyPair groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  

  /**
  * Currency pair group ID
  * @return groupId
  **/
  @Schema(example = "1", description = "Currency pair group ID")
  public Integer getGroupId() {
    return groupId;
  }
  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }
  public CurrencyPair amountMultiplier(Integer amountMultiplier) {
    this.amountMultiplier = amountMultiplier;
    return this;
  }

  

  /**
  * Amount multiplier used to trade for some pairs with low price
  * @return amountMultiplier
  **/
  @Schema(example = "1", description = "Amount multiplier used to trade for some pairs with low price")
  public Integer getAmountMultiplier() {
    return amountMultiplier;
  }
  public void setAmountMultiplier(Integer amountMultiplier) {
    this.amountMultiplier = amountMultiplier;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyPair currencyPair = (CurrencyPair) o;
    return Objects.equals(this.id, currencyPair.id) &&
        Objects.equals(this.currencyId, currencyPair.currencyId) &&
        Objects.equals(this.currencyCode, currencyPair.currencyCode) &&
        Objects.equals(this.currencyName, currencyPair.currencyName) &&
        Objects.equals(this.marketCurrencyId, currencyPair.marketCurrencyId) &&
        Objects.equals(this.marketCode, currencyPair.marketCode) &&
        Objects.equals(this.marketName, currencyPair.marketName) &&
        Objects.equals(this.minOrderAmount, currencyPair.minOrderAmount) &&
        Objects.equals(this.minBuyPrice, currencyPair.minBuyPrice) &&
        Objects.equals(this.minSellPrice, currencyPair.minSellPrice) &&
        Objects.equals(this.buyFeePercent, currencyPair.buyFeePercent) &&
        Objects.equals(this.sellFeePercent, currencyPair.sellFeePercent) &&
        Objects.equals(this.active, currencyPair.active) &&
        Objects.equals(this.delisted, currencyPair.delisted) &&
        Objects.equals(this.pairMessage, currencyPair.pairMessage) &&
        Objects.equals(this.currencyPrecision, currencyPair.currencyPrecision) &&
        Objects.equals(this.marketPrecision, currencyPair.marketPrecision) &&
        Objects.equals(this.symbol, currencyPair.symbol) &&
        Objects.equals(this.groupName, currencyPair.groupName) &&
        Objects.equals(this.groupId, currencyPair.groupId) &&
        Objects.equals(this.amountMultiplier, currencyPair.amountMultiplier);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, currencyId, currencyCode, currencyName, marketCurrencyId, marketCode, marketName, minOrderAmount, minBuyPrice, minSellPrice, buyFeePercent, sellFeePercent, active, delisted, pairMessage, currencyPrecision, marketPrecision, symbol, groupName, groupId, amountMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyPair {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    marketCurrencyId: ").append(toIndentedString(marketCurrencyId)).append("\n");
    sb.append("    marketCode: ").append(toIndentedString(marketCode)).append("\n");
    sb.append("    marketName: ").append(toIndentedString(marketName)).append("\n");
    sb.append("    minOrderAmount: ").append(toIndentedString(minOrderAmount)).append("\n");
    sb.append("    minBuyPrice: ").append(toIndentedString(minBuyPrice)).append("\n");
    sb.append("    minSellPrice: ").append(toIndentedString(minSellPrice)).append("\n");
    sb.append("    buyFeePercent: ").append(toIndentedString(buyFeePercent)).append("\n");
    sb.append("    sellFeePercent: ").append(toIndentedString(sellFeePercent)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    delisted: ").append(toIndentedString(delisted)).append("\n");
    sb.append("    pairMessage: ").append(toIndentedString(pairMessage)).append("\n");
    sb.append("    currencyPrecision: ").append(toIndentedString(currencyPrecision)).append("\n");
    sb.append("    marketPrecision: ").append(toIndentedString(marketPrecision)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    amountMultiplier: ").append(toIndentedString(amountMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
