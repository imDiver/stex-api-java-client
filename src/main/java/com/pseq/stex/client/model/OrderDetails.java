/*
 * stex.com rest API description
 * This is API you can use to connect your application to stex.com exchange and utilize all available features. All requests should go to the https://api3.stex.com followed by the one of the endpoint described below. The enpoints placed inside the /public section do not require authentication, all others requests should be authenticated with credentials you can get in your profile at https://app.stex.com/en/profile We also have a web-socket API present that has a number of advantages and is recommended way to connect to get the updates of the trading information To test API using this tool, please specify https://apidocs.stex.com/oauth2-redirect.html as Redirect URL in your API v3 client at https://app.stex.com/en/profile/settings 
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.pseq.stex.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pseq.stex.client.model.OrderFee;
import com.pseq.stex.client.model.OrderFill;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * OrderDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-02T20:38:18.888Z[GMT]")public class OrderDetails {

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("currency_pair_id")

  private Integer currencyPairId = null;

  @JsonProperty("price")

  private String price = null;

  @JsonProperty("initial_amount")

  private BigDecimal initialAmount = null;

  @JsonProperty("type")

  private String type = null;

  @JsonProperty("created")

  private String created = null;

  @JsonProperty("timestamp")

  private String timestamp = null;

  @JsonProperty("status")

  private String status = null;

  @JsonProperty("trades")

  private List<OrderFill> trades = null;

  @JsonProperty("fees")

  private List<OrderFee> fees = null;
  public OrderDetails id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(example = "5478965", description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public OrderDetails currencyPairId(Integer currencyPairId) {
    this.currencyPairId = currencyPairId;
    return this;
  }

  

  /**
  * Get currencyPairId
  * @return currencyPairId
  **/
  @Schema(example = "1", description = "")
  public Integer getCurrencyPairId() {
    return currencyPairId;
  }
  public void setCurrencyPairId(Integer currencyPairId) {
    this.currencyPairId = currencyPairId;
  }
  public OrderDetails price(String price) {
    this.price = price;
    return this;
  }

  

  /**
  * Get price
  * @return price
  **/
  @Schema(example = "0.00013800", description = "")
  public String getPrice() {
    return price;
  }
  public void setPrice(String price) {
    this.price = price;
  }
  public OrderDetails initialAmount(BigDecimal initialAmount) {
    this.initialAmount = initialAmount;
    return this;
  }

  

  /**
  * Order original amount
  * @return initialAmount
  **/
  @Schema(example = "1.00000000", description = "Order original amount")
  public BigDecimal getInitialAmount() {
    return initialAmount;
  }
  public void setInitialAmount(BigDecimal initialAmount) {
    this.initialAmount = initialAmount;
  }
  public OrderDetails type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(example = "BUY", description = "")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public OrderDetails created(String created) {
    this.created = created;
    return this;
  }

  

  /**
  * Get created
  * @return created
  **/
  @Schema(example = "2019-01-22 09:27:17", description = "")
  public String getCreated() {
    return created;
  }
  public void setCreated(String created) {
    this.created = created;
  }
  public OrderDetails timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Get timestamp
  * @return timestamp
  **/
  @Schema(example = "1548149237", description = "")
  public String getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }
  public OrderDetails status(String status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  @Schema(example = "FINISHED", description = "")
  public String getStatus() {
    return status;
  }
  public void setStatus(String status) {
    this.status = status;
  }
  public OrderDetails trades(List<OrderFill> trades) {
    this.trades = trades;
    return this;
  }

  public OrderDetails addTradesItem(OrderFill tradesItem) {
    if (this.trades == null) {
      this.trades = new ArrayList<OrderFill>();
    }
    this.trades.add(tradesItem);
    return this;
  }

  /**
  * A list of trades filled the order
  * @return trades
  **/
  @Schema(description = "A list of trades filled the order")
  public List<OrderFill> getTrades() {
    return trades;
  }
  public void setTrades(List<OrderFill> trades) {
    this.trades = trades;
  }
  public OrderDetails fees(List<OrderFee> fees) {
    this.fees = fees;
    return this;
  }

  public OrderDetails addFeesItem(OrderFee feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<OrderFee>();
    }
    this.fees.add(feesItem);
    return this;
  }

  /**
  * A list of fees taken for every trade
  * @return fees
  **/
  @Schema(description = "A list of fees taken for every trade")
  public List<OrderFee> getFees() {
    return fees;
  }
  public void setFees(List<OrderFee> fees) {
    this.fees = fees;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDetails orderDetails = (OrderDetails) o;
    return Objects.equals(this.id, orderDetails.id) &&
        Objects.equals(this.currencyPairId, orderDetails.currencyPairId) &&
        Objects.equals(this.price, orderDetails.price) &&
        Objects.equals(this.initialAmount, orderDetails.initialAmount) &&
        Objects.equals(this.type, orderDetails.type) &&
        Objects.equals(this.created, orderDetails.created) &&
        Objects.equals(this.timestamp, orderDetails.timestamp) &&
        Objects.equals(this.status, orderDetails.status) &&
        Objects.equals(this.trades, orderDetails.trades) &&
        Objects.equals(this.fees, orderDetails.fees);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, currencyPairId, price, initialAmount, type, created, timestamp, status, trades, fees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDetails {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currencyPairId: ").append(toIndentedString(currencyPairId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    initialAmount: ").append(toIndentedString(initialAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trades: ").append(toIndentedString(trades)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
